#!/usr/bin/perl -w

use strict;
use warnings;

BEGIN {
    eval 'use Carp::Always';
}

use Template ();
use Template::Constants qw( :debug :chomp );

my %defaults = (
    INCLUDE_PATH    => [ qw( tt ) ],
    OUTPUT_PATH     => '101/',
    DEBUG           => DEBUG_UNDEF,
    TRIM            => CHOMP_ALL,
    PRE_CHOMP       => 1,
    POST_CHOMP      => 1,
);

my $tt = Template->new( \%defaults );
my $vars = {};

my @podfiles;
my @sidelinks;

for ( get_sections( 's/' ) ) {
    my ($sectionfile, $sectiontext) = @{$_};

    my $podfile = "s/$sectionfile.pod";
    my $htmlfile = "$sectionfile.html";
    push( @sidelinks, {
        filename => $htmlfile,
        text => $sectiontext,
    } );
    push( @podfiles, {
        section => $sectiontext,
        podfile => $podfile,
        htmlfile => $htmlfile,
    } );
}

for my $vars ( @podfiles ) {
    $vars->{content} = pod2html( $vars->{podfile} );
    $vars->{sidelinks} = \@sidelinks;
    $tt->process( 'section.tt', $vars, $vars->{htmlfile} ) || die $tt->error;
}

sub get_sections {
    my $sourcedir = shift;

    opendir my $dh, $sourcedir or die "Can't open $sourcedir";
    my %pod = map { ($_,1) } grep { /\.pod$/ && -f "$sourcedir/$_" } readdir $dh;

    my @ordered_sections;
    for my $section ( <DATA> ) {
        chomp $section;
        my $filename = make_filename( $section );
        delete $pod{"$filename.pod"} or die "$filename is in the section list but not in the source";
        push( @ordered_sections, [ $filename, $section ] );
    }
    if ( keys %pod ) {
        die "The following pod files still exist: ", join( ', ', sort keys %pod );
    }

    return @ordered_sections;
}

sub make_filename {
    my $name = lc shift;

    $name =~ s/[^-a-z]+/-/g;
    $name =~ s/^-//;
    $name =~ s/-$//;

    return $name;
}

sub pod2html {
    my $podfile = shift;

    my $html;

    my $parser = Pod::Simple::Perl101->new;
    $parser->html_header_before_title( '' );
    $parser->html_header_after_title( '' );
    $parser->html_footer( '' );

    $parser->complain_stderr( 1 );
    $parser->output_string( \$html );
    $parser->parse_file( $podfile );

    return $html;
}

# Subclassing Pod::Simple::HTML:
# http://search.cpan.org/~arandal/Pod-Simple-3.05/lib/Pod/Simple/Subclassing.pod
package Pod::Simple::Perl101;

#use Pod::Simple::Debug(5);
use base 'Pod::Simple::HTML';

sub VERSION { '0.01' };

sub new {
    my $self = shift->SUPER::new(@_);

    $self->accept_codes( qw( P ) );

    my $tagmap = $self->{Tagmap};

    $tagmap->{P} = qq{<a href="http://perldoc.perl.org/};
    $tagmap->{'/P'} = qq{.html">this page</a>};

    return $self;
}


sub _handle_element_start {
    my($parser, $element_name, $attr_hash_r) = @_;


    return $parser->SUPER::_handle_element_start( $element_name, $attr_hash_r );
}

1;

package main;

__DATA__
Index
How to get Perl
Terms
Documentation
Strings
Numbers
Arrays
Hashes
Regexes
Flow Control
Subroutines
POD
Files
Debugging
Modules
Modules: Making your own
External programs
CPAN
Constructs
References
Objects
Special Variables
Command-line Switches
Advanced Functions
Style
Performance
Traps
Email
How do I...?
Developer Tools
Publications
Community
Random
TODO
