=head1 Files and directories

=head2 Read files easily with C<open> and the C<< <> >> operator

Opening and reading files with Perl is simple.  Here's how to open
a file, read it line-by-line, check it for text matching a regular
expression, and print the lines that match.

    open( my $fh, '<', $filename ) or die "Can't open $filename: $!";
    while ( my $line = <$fh> ) {
        if ( $line =~ /wanted text/ ) {
            print $line;
        }
    }
    close $fh;

=head2 Remove trailing linefeeds with C<chomp>

Lines read from a file have their trailing linefeed still attached.
If you have a text file where the first line is

    Aaron

"Aaron", is actually "Aaron\n", six characters.  This code will fail:

    my $line = <$fh>;
    if ( $line eq 'Aaron' ) {
        # won't reach here, because it's really "Aaron\n";
    }


To remove the C<"\n">, and any other trailing whitespace, call
C<chomp>.

    my $line = <$fh>;
    chomp $line;

Now C<$line> is five characters long.

=head2 Change your line delimiter with C<$/>

It's possible to change your input record separator, C<$/>.  It's
only set to "\n" by default.

Set C<$/> to read a paragraph at a time.  Set C<$/> to C<undef> to
read the entire file at once.  See P<perlvar> for details.

=head2 Get lists of files with C<glob()>

Use standard shell globbing patterns to get a list of files.

    my @files = glob( "*" );

Pass them through C<grep> to do quick filtering.  For example, to
get files and not directories:

    my @files = grep { -f } glob( "*" );

=head2 Unlink to remove a file

The Perl built-in C<delete> deletes elements from a hash, not files from the filesystem.

    my %stats;

    $stats{filename} = 'foo.txt';

    unlink $stats{filename}; # RIGHT: Removes "foo.txt" from the filesystem

    delete $stats{filename}; # WRONG: Removes the "filename" element from %stats

=head2 Always check the return code from C<open>

C<open()> can fail for most any reason.  You always want to check
the return code for truthiness.  If there's a failure, the result
is in C<$!>

    open(my $file, '<', $filename) or die "Error opening $filename: $!\n";

=head2 while(<>) not foreach (<>)

Instead of slurping in an entire file and then working on it, you should
read one line of the file at a time and process it (if you can.)  Doing this
is significantly less memory intensive for little cost.

Consider:

    $ cat /dev/random | perl -e 'foreach (<>) { $i++; last if $i > 10; }; print "ok\n"'
    Out of memory!
    $ cat /dev/random | perl -e 'while (<>) { $i++; last if $i > 10; }; print "ok\n"'
    ok
    $

In short: Use C<while> for file fetches when possible.
