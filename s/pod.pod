=head1 POD

Plain Ol' Documentation

=head2 Inline documentation & formatting

POD allows you to create documentation with markup in your Perl code.
If you've seen Javadoc or PHPdoc, it's like that.
Rather, Javadoc and PHPdoc are like POD.

Except that POD is part of the language, not an add-on spec.

=head2 Create headings with C<=head1> and C<=head2>

    =head1 MOST IMPORTANT

    Blah blah

    =head2 Subheading

    blah blah

    =head2 Subhading

    blah blah

=head2 Create unordered lists

To create this list:

=over

=item * Wango

=item * Tango

=item * Fandango

=back

Use

    =over

    =item * Wango

    =item * Tango

    =item * Fandango

    =back

=head2 Create ordered lists

To create this list:

=over

=item 1 Visit perl101.org

=item 2 ???

=item 3 Profit!

=back

Use

    =over

    =item 1 Visit perl101.org

    =item 2 ???

    =item 3 Profit!

    =back

=head2 Use inline markup styles

POD uses BE<lt>E<gt>, IE<lt>E<gt> and CE<lt>E<gt> for B<bold>,
I<italics> and C<code>, respectively.

    B<This is bolded>

    I<This is italics>

    C<This is code>

Your markup formats can nest.

=head2 Link with C<LE<lt>E<gt>>

The C<LE<lt>E<gt>> links either to keywords in your document, as in
C<< LE<lt>MethodsE<gt> >>, or to a specific URL, as in
C<< LE<lt>http://search.cpan.orgE<gt> >>.

=head2 Paragraph mode vs. literal blocks

Everything in a paragraph word-wraps automatically.  A paragraph
is separated by at least one blank line.

    A literal block is indented at least one space
    and does not
    get
    wrapped.

This came from:

    Everything in a paragraph word-wraps automatically.  A paragraph
    is separated by at least one blank line.

        A literal block is indented at least one space
        and does not
        get
        wrapped.

=head2 POD does not make anything run slower.

It's stripped out at compile time.

=head2 TODO

Talk about double-bracketing


